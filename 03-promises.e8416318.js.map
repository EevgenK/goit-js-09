{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAqCA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,IAEpCJ,EAAQ,CAAEH,WAAUC,UAEtBG,EAAO,CAAEJ,WAAUC,S,GAClBA,E,IA5CPO,EAAAX,GAASY,OAAOC,KAAK,CACnBC,QAAS,CACPC,UAAW,uBACXC,WAAY,UACZC,kBAAmB,wBAErBC,QAAS,CACPH,UAAW,sBACXC,WAAY,UACZC,kBAAmB,yBAGVE,SAASC,cAAc,SAC/BC,iBAAiB,UAEtB,SAAoBC,GAClBA,EAAEC,iBAOF,IANA,IAIIC,EAAAF,EAAEG,OAHKC,EAGPF,EAHFpB,MAASuB,MACDC,EAENJ,EAFFI,KAAQD,MACEE,EACRL,EADFK,OAAUF,MAGHG,EAAI,EAAGA,EAAIC,OAAOF,GAASC,GAAK,EAAG,CAC1C,IAAIE,EAAeD,OAAOL,GAASI,EAAIC,OAAOH,GAE9C1B,EADe4B,EAAI,EACKE,GACrBC,MAAK,SAAAC,G,IAAG/B,EAAQ+B,EAAR/B,SAAUC,EAAK8B,EAAL9B,MACjBO,EAAAX,GAASY,OAAOM,QAAQ,qBAAoCiB,OAAfhC,EAAS,QAAYgC,OAAN/B,EAAM,M,IAEnEgC,OAAM,SAAAF,G,IAAG/B,EAAQ+B,EAAR/B,SAAUC,EAAK8B,EAAL9B,MAClBO,EAAAX,GAASY,OAAOE,QAAQ,oBAAmCqB,OAAfhC,EAAS,QAAYgC,OAAN/B,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nNotiflix.Notify.init({\n  failure: {\n    textColor: 'rgba(242, 10, 33, 1)',\n    background: '#80cbc4',\n    notiflixIconColor: 'rgba(242, 10, 33, 1)',\n  },\n  success: {\n    textColor: 'rgba(6, 20, 214, 1)',\n    background: '#80cbc4',\n    notiflixIconColor: 'rgba(6, 20, 214, 1)',\n  },\n});\nconst form = document.querySelector('.form');\nform.addEventListener('submit', onBtnClick);\n\nfunction onBtnClick(e) {\n  e.preventDefault();\n  const {\n    delay: { value: delay },\n    step: { value: step },\n    amount: { value: amount },\n  } = e.target;\n\n  for (let i = 0; i < Number(amount); i += 1) {\n    let delayCounter = Number(delay) + i * Number(step);\n    let position = i + 1;\n    createPromise(position, delayCounter)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }\n      reject({ position, delay });\n    }, delay);\n  });\n}\n"],"names":["$ejkSG","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","$parcel$interopDefault","Notify","init","failure","textColor","background","notiflixIconColor","success","document","querySelector","addEventListener","e","preventDefault","_target","target","delay1","value","step","amount","i","Number","delayCounter","then","param","concat","catch"],"version":3,"file":"03-promises.e8416318.js.map"}