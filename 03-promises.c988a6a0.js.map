{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SACAC,EAAAF,GAASG,OAAOC,KAAK,CACnBC,QAAS,CACPC,UAAW,uBACXC,WAAY,UACZC,kBAAmB,wBAErBC,QAAS,CACPH,UAAW,sBACXC,WAAY,UACZC,kBAAmB,yBAGvB,IAAME,EAAOC,SAASC,cAAc,SA8BpC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,IAEpCJ,EAAQ,CAAEH,WAAUC,UAEtBG,EAAO,CAAEJ,WAAUC,S,GAClBA,E,IArCPL,EAAKY,iBAAiB,SAEtB,SAAoBC,GAClB,GAAIA,EAAEC,SAAWd,EAAKe,iBAAkB,CACtCF,EAAEG,iBASF,IARA,IAIIC,EAAAjB,EAAKkB,SAHEC,EAGPF,EAHFZ,MAASe,MACDC,EAENJ,EAFFI,KAAQD,MACEE,EACRL,EADFK,OAAUF,MAGRG,EAAW,EACXC,EAAeC,OAAON,GACnBI,GAAYE,OAAOH,IACxBnB,EAAcoB,EAAUC,GACrBE,MAAK,SAAAC,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MACjBb,EAAAF,GAASG,OAAOM,QACd,qBAAoC6B,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAG7CwB,OAAM,SAAAF,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MAClBb,EAAAF,GAASG,OAAOE,QAAQ,oBAAmCiC,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAErEmB,GAAgBC,OAAOJ,GACvBE,GAAY,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nNotiflix.Notify.init({\n  failure: {\n    textColor: 'rgba(242, 10, 33, 1)',\n    background: '#80cbc4',\n    notiflixIconColor: 'rgba(242, 10, 33, 1)',\n  },\n  success: {\n    textColor: 'rgba(6, 20, 214, 1)',\n    background: '#80cbc4',\n    notiflixIconColor: 'rgba(6, 20, 214, 1)',\n  },\n});\nconst form = document.querySelector('.form');\nform.addEventListener('click', onBtnClick);\n\nfunction onBtnClick(e) {\n  if (e.target === form.lastElementChild) {\n    e.preventDefault();\n    const {\n      delay: { value: delay },\n      step: { value: step },\n      amount: { value: amount },\n    } = form.elements;\n\n    let position = 1;\n    let delayCounter = Number(delay);\n    while (position <= Number(amount)) {\n      createPromise(position, delayCounter)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `Fulfilled promise ${position} in ${delay}ms`\n          );\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n        });\n      delayCounter += Number(step);\n      position += 1;\n    }\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }\n      reject({ position, delay });\n    }, delay);\n  });\n}\n"],"names":["$ejkSG","parcelRequire","$parcel$interopDefault","Notify","init","failure","textColor","background","notiflixIconColor","success","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","e","target","lastElementChild","preventDefault","_elements","elements","delay1","value","step","amount","position1","delayCounter","Number","then","param","concat","catch"],"version":3,"file":"03-promises.c988a6a0.js.map"}